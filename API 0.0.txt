Done 1.login/
	POST username,password
	Reply: token or error message

Done  2.signup/	
	POST username(only lowercase,underscore,numbers allowed),password
	Reply: token,username
	Note:Username availability(using API no 3.Password strength etc is checked by front-end.Hence this should always return token)

Done 3.username_check/
	Do validation in client side,
	Send req only if username is available,
	POST username(only lowercase,underscore,numbers allowed),
	send as lowercase only,,
	username is lowercase_d before checked,
	Reply: 1 means available 0 means not available,

Below APIs require auth_token in POST by default



*Do not use this API.Usernames are permanent* 
Dont do 4.username_change/
	POST username
	Change the username of the user
	Note:Front-end ensures the availability of new username using API-3
------
Done 5.follow/
	ToDo dont accept req if req is already sent
	POST user_id
	Send a follow request to user_id
	Reply OK or 400 or 500

Done 10.accept_follow_request/
	Reply OK or 400 or 500
	POST user_id
	Reply:Accept the follow request sent by user_id and return 200-OK

Done 6.unfollow/
	Reply OK or 500
	POST user_id
	Unfollow him

Done 7.follow_requests_sent/
	Reply: [id1,id2,...] to whom I sent follow requests or 0

Done 8.delete_sent_follow_request/
	Reply OK or 500
	POST user_id
	Delete the follow request I sent

Done 9.followees/
	Reply:user_ids of people I follow [id1,id2,...] or 0
 ------
notifications
Done 10.accepted_follow_requests/
		Flow:
			First ever request (request without top_flag):
				Initially there are no data at client.
				Client sends request at gets 5 notifs in descending order.Stores accept_id of latest of 5 as "top_flag".Stores accept_id of oldest of 5 as "bottom_flag"
				Client sends back the bottom_flag and gets content older than and sets oldest thme as "bottom_flag".Continiues until server runs out of data.Then bottom_flag is cleared.
			Once top_flag is set,following method is used:
				First request is sent without any flags.After receiving them all,latest of them is set as "temp_top_flag"
				Further requests happen using bottom_flag and so on until one of the received accept_ids match with top_flag.This means we have started receiving "already received data".Hence client stops further requests and set top_flag=temp_top_flag.
				temp_top_flag,bottom_flag are cleared.
			Return : return ids of people who accepted my follow_req  and bottom_flag or 0
			eg :{"acceptee_ids":[122,122,122,122,122],"bottom_flag":7}

Done 11.follow_requests_received/
			return all of the ids who sent me follow reqs.One big dump.
	

Done 12.delete_received_follow_request/
	POST sender_user_id
	Delete the follow request I received from the "sender_user_id" user.
	Reply: 200-OK or 500

Done 13.delete_follower/
	POST follower_id
	Delete my follower with above id and return 200-OK

Done 14.followers/
	Reply: All my followers user_ids
---------

Next:
	find people in ur area whom you dont follow

Done 15.update_user_locatiom/
		POST longitude,latitude
		return OK
		It exists for "find".To find people nearby,locations of all users should be updated freqly.
Done 16.find_nearby_people/
		Return N nearby people user_ids whom I dont follow


Done 17.follow_status/
		POST user_id
		Return below:
			Follow status
			Status codes: 1.Not Following 2.Request sent 3.Following
----------------------Done Aug23--------------------------
Done 18.logout/
	POST
		Deletes token at server


Ramanan's Area.Ramanan should do the following first.Refer tables.sql for queries

33.get_username/
	POST user_id
	Return the username of user_id

31.search/
	Return N people's user_id's with matching names
		OR
	404 if no one is







LW
	Note:
		Every post is identified by (user_id,post_id)
		Public post contains likes,dislikes(not shown to user),views
		Private post contains likes,views

100.public_post_request/
	POST (client doesn't send anything)
	determine the new_public_post_id,
	send bucketname and filename (==> userid_newPublicPostid.jpg,type=JPEG) to S3.Get the url and keys
	Return URL,filename and keys to client.Client uploads the image to s3 (filename=filename received from server) using keys and URL.
	On success client call public_post_success API,on failure it requests URL again or blah.

1212.public_post_success/
	POST public_post_id,longitude,latitude
	Server writes to public_posts_table that "post has been made".Location is sent from front-end

121.public_feed/
	Return posts (include s3_urls too)

16.view_public_post
	POST user_id,post_id
	Increment the view count of a post and return OK.
	Front-end ensures nothing is "viewed" twice.

	Note: Front-end ensures that like and dislike are not performed at the same time.

17.like_public_post
	POST user_id,post_id
	Increment like and OK

18.unlike_public_post
	...

19.dislike_public_post
	...

20.undo_dislike_public_post
	....

32.new_public_post_check/
	Return true if new public_posts are available.An indicator will show this in front-end.So user or front-end ma choose to reload.
#Do we need this^ for private_posts too?

24.public_posts/
	Return all my public posts (post_id,s3_urls,likes,views)

25.delete_public_post/
	Mark the post as deleted .Delete S3 file.Why mark so? Because once deleted,old post id may still be referenced but it will have new pic.So..

-----------------Private starts here----------------
27.private_post_request/
	POST (client doesn't send anything)
	determine the new_private_post_id,
	send bucketname and filename (==> userid_newPrivatePostid.jpg,type=JPEG) to S3.Get the url and keys
	Return URL,filename and keys to client.Client uploads the image to s3 (filename=filename received from server) using keys and URL.
	On success client call private_post_success API,on failure it requests URL again or blah.

28.private_post_success/
	POST successful_post_id
	Server writes to private_posts_table that post has been made.

323.private_feed/
	return s3_urls too
	..

22.like_private_post/
	...

23.unlike_private_post/
	...

26.private_posts/
	Return all my private posts (post_id,s3_urls,likes,views)


35.change_password/
	POST new_password
	Please use django-rest-auth (rest_auth)
	...

Future
For super_user only
post_monitor_APIs
	Store all new posts in a table like logs = log_table
	new_posts_availablility_check/
			return 1 or 0
	get_new_public_posts/
			POST keep pinging with last_received_post
			Return new_posts with URLs ( read from log_table)
	delete_a_post/
			mark the post as deleted
